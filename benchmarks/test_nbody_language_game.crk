// Copyright 2011 Conrad Steenberg <conrad.steenberg@gmail.com>
// 
//   This Source Code Form is subject to the terms of the Mozilla Public
//   License, v. 2.0. If a copy of the MPL was not distributed with this
//   file, You can obtain one at http://mozilla.org/MPL/2.0/.
// 
// The Computer Language Benchmarks Game
// http://shootout.alioth.debian.org/

// contributed by The Go Authors.
// based on C program by Christoph Bauer
// flag.Arg hack by Isaac Gouy
// Modified from the Go version by Conrad Steenberg <conrad.steenberg@gmail.com>

import crack.sys argv;
import crack.math sqrt, PI, atoi;
import crack.lang FreeBase;
import crack.io cout;

// Some constants
float64 solarMass   = 4 * PI *PI;
float64 daysPerYear = 365.24;

// -----------------------------------------------------------------------------
// Class to hold body information
class Body {
   float64 x, y, z, vx, vy, vz, mass;

   oper init(float64 x, float64 y, float64 z, 
             float64 vx, float64 vy, float64 vz, 
             float64 mass):
      x(x), y(y), z(z), vx(vx), vy(vy), vz(vz), mass(mass)
   {}
   
   @final
   void offsetMomentum(float64 px, float64 py, float64 pz){
      vx = -px / solarMass;
      vy = -py / solarMass;
      vz = -pz / solarMass;
   }
   
   Body copy(){
      return Body(x, y, z, vx, vy, vz, mass);
   }
   
   void write(){
      cout `x: $x, y: $y, z: $z\nvx: $vx, vy: $vy, vz: $vz\n`;
   }

}

// -----------------------------------------------------------------------------
// Data for the outer planets
Body jupiter = {
    4.84143144246472090e+00,
   -1.16032004402742839e+00,
   -1.03622044471123109e-01,
    1.66007664274403694e-03 * daysPerYear,
    7.69901118419740425e-03 * daysPerYear,
   -6.90460016972063023e-05 * daysPerYear,
    9.54791938424326609e-04 * solarMass
};

Body saturn = {
    8.34336671824457987e+00,
    4.12479856412430479e+00,
   -4.03523417114321381e-01,
   -2.76742510726862411e-03 * daysPerYear,
    4.99852801234917238e-03 * daysPerYear,
    2.30417297573763929e-05 * daysPerYear,
    2.85885980666130812e-04 * solarMass
};

Body uranus = {
    1.28943695621391310e+01,
   -1.51111514016986312e+01,
   -2.23307578892655734e-01,
    2.96460137564761618e-03 * daysPerYear,
    2.37847173959480950e-03 * daysPerYear,
   -2.96589568540237556e-05 * daysPerYear,
    4.36624404335156298e-05 * solarMass
};

Body neptune = {
    1.53796971148509165e+01,
   -2.59193146099879641e+01,
    1.79258772950371181e-01,
    2.68067772490389322e-03 * daysPerYear,
    1.62824170038242295e-03 * daysPerYear,
   -9.51592254519715870e-05 * daysPerYear,
    5.15138902046611451e-05 * solarMass
};

Body sun = { 0, 0, 0, 0, 0, 0, solarMass};

// -----------------------------------------------------------------------------
// System class, an array of bodies
class System: FreeBase {
   array[Body] bodies;
   uint syslen;
   Body body;
   float64 dx, dy, dz, distance;

   oper init(array[Body] inbodies, uint nbodies): 
      syslen(nbodies) {
      bodies = inbodies;

      // Do initial iteration
      float64 px = 0, py = 0, pz = 0;
      for (uint i=0; i< syslen; i++) {
         body = bodies[i];
         px += body.vx * body.mass;
         py += body.vy * body.mass;
         pz += body.vz * body.mass;
      }

      bodies[0].offsetMomentum(px, py, pz);
   }

   // Calculate energy of the system
   @final
   float64 energy() {
      float64 e = 0;
      uint i = 0;
      Body body2;
      
      for (uint i=0; i< syslen; i++) {
         body = bodies[i];
         e += 0.5 * body.mass *
            (body.vx*body.vx + body.vy*body.vy + body.vz*body.vz);

         for (uint j = i + 1; j < syslen; j++) {
            body2 = bodies[j];
            dx = body.x - body2.x;
            dy = body.y - body2.y;
            dz = body.z - body2.z;
            distance = sqrt(dx*dx + dy*dy + dz*dz);
            e -= (body.mass * body2.mass) / distance;
         }
      }
      return e;
   }

   // Advance system at time step dt
   @final
   void advance(float64 dt) {
      uint i = 0;
      float64 dSquared, mag, body_mass, body2_mass;
      Body body2;
      
      // Update velocities
      for (uint i=0; i< syslen; i++) {
         body = bodies[i];
         body_mass = body.mass;
         for (uint j = i + 1; j < syslen; j++) {
            body2 = bodies[j];
            body2_mass = body2.mass;

            dx = body.x - body2.x;
            dy = body.y - body2.y;
            dz = body.z - body2.z;

            dSquared = dx*dx + dy*dy + dz*dz;
            distance = sqrt(dSquared);
            mag = dt / (dSquared * distance);

            body.vx -= dx * body2_mass * mag;
            body.vy -= dy * body2_mass * mag;
            body.vz -= dz * body2_mass * mag;

            body2.vx += dx * body_mass * mag;
            body2.vy += dy * body_mass * mag;
            body2.vz += dz * body_mass * mag;
         }
      }

      // Update positions
      for (uint i=0; i< syslen; i++) {
         body = bodies[i];
         body.x += dt * body.vx;
         body.y += dt * body.vy;
         body.z += dt * body.vz;
      }
   }
}

// -----------------------------------------------------------------------------
// Driver code
int N = 0;
if (argv.count() > 1) N = atoi(argv[1].buffer);

// Initialize system of planets
array[Body] planets = [sun, jupiter, saturn, uranus, neptune];
System system = { planets, 5 };

cout `$(system.energy())\n`;

// Run N steps
for (int i = 0; i < N; i++) {
   system.advance(0.01);
}

cout `$(system.energy())\n`;
