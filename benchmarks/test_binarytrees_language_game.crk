// Copyright 2010 Conrad Steenberg <conrad.steenberg@gmail.com>
// Copyright 2010 Google Inc.
// 
//   This Source Code Form is subject to the terms of the Mozilla Public
//   License, v. 2.0. If a copy of the MPL was not distributed with this
//   file, You can obtain one at http://mozilla.org/MPL/2.0/.
// 
/* The Computer Language Benchmarks Game
   http://shootout.alioth.debian.org/

  Adapted from C# version contributed by Marek Safar
  Conrad D. Steenberg <conrad.steenberg@gmail.com>
  10/25/2010
*/

import crack.sys argv;
import crack.io cout;

// add this back when we get math
// import crack.math atoi;
import "libc.so.6" atoi;
int atoi(byteptr s);


class TreeNode {

    class Next {
        TreeNode left, right;
    
        oper init(TreeNode in_left, TreeNode in_right) :
            left = in_left,
            right = in_right {
        }
    }

    Next next;
    int item = 0;
  
    oper init(int in_item) :
        item(in_item) {
    }
  
    oper init(TreeNode left, TreeNode right, int in_item) :
        item(in_item),
        next = Next(left, right) {
    }
  
    @final int itemCheck() {
        // if necessary deallocate here
        if (next == null)
            return item;
        else
            return item + next.left.itemCheck() -
                   next.right.itemCheck();
    }
}

TreeNode bottomUpTree(int in_item, int depth) {
    if (depth>0) {
        return TreeNode(
            bottomUpTree(2*in_item-1, depth-1),
            bottomUpTree(2*in_item, depth-1),
            in_item
        );
    } else {
        return TreeNode(in_item);
    }
}


minDepth := 4;
n := 20;

// Comment this out if you don't have the math module
argc := argv.count();
if (argv.count() > 1) n = atoi(argv[1].buffer);

maxDepth := n;
if (n < minDepth + 2) maxDepth = minDepth + 2;
stretchDepth := maxDepth + 1;

check := bottomUpTree(0, stretchDepth).itemCheck();
cout `stretch tree of depth $stretchDepth\t check: $check\n`;

longLivedTree := bottomUpTree(0,maxDepth); // classes are variables
depth := minDepth;

while (depth <= maxDepth) {
    iterations:= 1 << (maxDepth - depth + minDepth);

    check = 0;
    i := 1;
    while (i <= iterations) {
        check += bottomUpTree(i,depth).itemCheck();
        check += bottomUpTree(-i,depth).itemCheck();
        i += 1;
    }

    cout `$(iterations*2)\t trees of depth $depth\t check: $check\n`;
    depth += 2;
}

check = longLivedTree.itemCheck();
cout `long lived tree of depth $maxDepth\t check: $check\n`;
