// Copyright 2010 Google Inc.
// Copyright 2010 Conrad Steenberg <conrad.steenberg@gmail.com>
// 
//   This Source Code Form is subject to the terms of the Mozilla Public
//   License, v. 2.0. If a copy of the MPL was not distributed with this
//   file, You can obtain one at http://mozilla.org/MPL/2.0/.
// 
// The Computer Language Benchmarks Game
// http://shootout.alioth.debian.org/
// contributed by Mike Pall
// Adapted from lua version by Conrad Steenberg <conrad.steenberg@gmail.com>

import crack.sys argv;
import crack.io cout, cerr;
import crack.math atoi, strtof;
import crack.runtime write;

uint32 N = 200;

uint32 rol(uint32 D, uint32 B) {
    return ((D << B) | (D >> (32-B)));
}

uint32 b = 0xFF000000;

// Comment this out if you don't have the math module
if (argv.count() > 1) N = uint32(atoi(argv[1].buffer));
float64 M = 2.0 / N;
buf := array[uint32](N);
bbuf := array[byte](N);
bptr := byteptr(bbuf);


cout `P4\n$N $N\n`;
uint32 x, y = 0, p, i;
float64 Ci, Ciq, Cr, Zr, Zi, Zr2, Cr2, Zi2, Zrq, Ziq, Zrq2, Ziq2;

while (y < N) {
  b = 0xFF000000;
  p = 0;

  Ci = y * M - 1;
  Ciq = Ci * Ci;

  x = 0;

  while (x < N) {
      Cr = x * M - 1.5;
      Cr2 = (x + 1) * M - 1.5;
      //~ cout `x:$x Cr = $Cr\n`;
      //~ cout `x:$x Cr2 = $Cr2\n`;
  
      Zr = Cr; Zi = Ci; Zrq = Cr * Cr; Ziq = Ciq;
      Zr2 = Cr2; Zi2 = Ci; Zrq2 = Cr2 * Cr2; Ziq2 = Ciq;
      //~ cout `x:$x Zrq+Ziq = $(Zrq+Ziq)\n`;
      //~ cout `x:$x Zrq2+Ziq2 = $(Zrq2+Ziq2)\n`;
  
  
      b = rol(b, 2);
      //~ cout `b[$x] = $(int32(b))\n`;
  
      i = 1;
      while (i < 50) {
          Zi = Zr * Zi * 2 + Ci; Zi2 = Zr2 * Zi2 * 2 + Ci;
          Zr = Zrq - Ziq + Cr; Zr2 = Zrq2 - Ziq2 + Cr2;
          Ziq = Zi * Zi; Ziq2 = Zi2 * Zi2;
          Zrq = Zr * Zr; Zrq2 = Zr2 * Zr2;
          //~ cout `i:$i Zrq+Ziq = $(Zrq+Ziq)\n`;
          //~ cout `i:$i Zrq2+Ziq2 = $(Zrq2+Ziq2)\n`;
    
          if ((b & 2) != 0 && (Zrq + Ziq) > 4.0){
              b &= 0xFFFFFFFD;
          }
    
          if ((b & 1) != 0 && (Zrq2 + Ziq2) > 4.0) {
              b &= 0xFFFFFFFE;
          }
    
          //~ cout `  $i: b=$(int(b))\n`;
          if ((b & 3) == 0) break;
          i++;
      }
  
      if ((b & 0x80000000) == 0) { // first bit is not set, i.e. b>=0
          p++;
          buf[p] = b;
          b = 0xFF000000;
      }
  
      x += 2;
  }

  if (b != 0xFF000000) {
    if ((N & 1) != 0 ) b >>= 1;
    p++;
    buf[p] = b << (8 - (N & 7));
  }

  i = 0;
  while (i < p){
    bbuf[i] = byte(buf[i + 1]);
    i++;
  }
  write(1, bptr, p);
  y++;
}
