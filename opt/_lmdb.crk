// Copyright 2013 Conrad Steenberg <conrad.steenberg@gmail.com>
//
//   This Source Code Form is subject to the terms of the Mozilla Public
//   License, v. 2.0. If a copy of the MPL was not distributed with this
//   file, You can obtain one at http://mozilla.org/MPL/2.0/.
//
//   Aug 31, 2013
// Crack bindings for LMDB
// See  http://symas.com/mdb

@import crack.extgen generateExtension;

@generateExtension crack.ext._lmdb {
    @filename 'opt/_lmdb.cc'
    @dumpsymbols 'opt/_lmdb.txt'
    @inject '#include <stdlib.h>\n'
    @inject '#include <stdio.h>\n'
    @inject '#include <errno.h>\n'
    @inject '#include <inttypes.h>\n'
    @inject '#include <lmdb.h>\n'
    @inject 'typedef void * voidptr;\n'
    @inject 'typedef char * byteptr;\n'
    @inject 'typedef int Undef;\n'

    @crack_internal

    const int
        MDB_VERSION_MAJOR,
        MDB_VERSION_MINOR,
        MDB_VERSION_PATCH,

        MDB_FIXEDMAP,
        MDB_NOSUBDIR,
        MDB_NOSYNC,
        MDB_RDONLY,
        MDB_NOMETASYNC,
        MDB_WRITEMAP,
        MDB_MAPASYNC,
        MDB_NOTLS,

        MDB_REVERSEKEY,
        MDB_DUPSORT,
        MDB_INTEGERKEY,
        MDB_DUPFIXED,
        MDB_INTEGERDUP,
        MDB_REVERSEDUP,
        MDB_CREATE,

        MDB_NOOVERWRITE,
        MDB_NODUPDATA,
        MDB_CURRENT,
        MDB_RESERVE,
        MDB_APPEND,
        MDB_APPENDDUP,
        MDB_MULTIPLE,

        MDB_SUCCESS,
        MDB_KEYEXIST,
        MDB_NOTFOUND,
        MDB_PAGE_NOTFOUND,
        MDB_CORRUPTED,
        MDB_PANIC,
        MDB_VERSION_MISMATCH,
        MDB_INVALID,
        MDB_MAP_FULL,
        MDB_DBS_FULL,
        MDB_READERS_FULL,
        MDB_TLS_FULL,
        MDB_TXN_FULL,
        MDB_CURSOR_FULL,
        MDB_PAGE_FULL,
        MDB_MAP_RESIZED,
        MDB_INCOMPATIBLE,
        MDB_BAD_RSLOT,
        MDB_BAD_TXN,
        MDB_LAST_ERRCODE,
        MDB_BAD_VALSIZE,

        MDB_FIRST,
        MDB_FIRST_DUP,
        MDB_GET_BOTH,
        MDB_GET_BOTH_RANGE,
        MDB_GET_CURRENT,
        MDB_GET_MULTIPLE,
        MDB_LAST,
        MDB_LAST_DUP,
        MDB_NEXT,
        MDB_NEXT_DUP,
        MDB_NEXT_MULTIPLE,
        MDB_NEXT_NODUP,
        MDB_PREV,
        MDB_PREV_DUP,
        MDB_PREV_NODUP,
        MDB_SET,
        MDB_SET_KEY,
        MDB_SET_RANGE;

    // Opaque classes
    @cname Undef
    class MDB_env;

    @cname Undef
    class MDB_cursor;

    @cname Undef
    class MDB_txn;


    class MDB_val {
        uint64 	mv_size;
        byteptr mv_data;
    }

    class MDB_stat {
        uint    ms_psize;
        uint    ms_depth;
        uint64 	ms_branch_pages;
        uint64 	ms_leaf_pages;
        uint64 	ms_overflow_pages;
        uint64 	ms_entries;
    }

    @inject I'MDB_val *mdb_val_new() {
                return (MDB_val *)malloc(sizeof(MDB_val));
             }\n';

    MDB_val mdb_val_new();

    @inject I'MDB_env *mdb_env_create_crk() {
                MDB_env *env;
                errno = mdb_env_create(&env);
                if (errno) return NULL;
                return env;
            }\n';

    @cname mdb_env_create_crk
    MDB_env mdb_env_create();

    void mdb_env_close(MDB_env env);
    int mdb_env_set_mapsize(MDB_env env, uint64 size);
    int mdb_env_set_maxdbs(MDB_env env, uint size);
    int mdb_env_open(MDB_env env, byteptr path, uint flags, int mode);

    @inject I'byteptr mdb_strerror_crk() {
                return mdb_strerror(errno);
            }\n';

    byteptr mdb_strerror (int err);

    @cname mdb_strerror_crk
    byteptr mdb_strerror ();

    int mdb_env_copy(MDB_env env, byteptr path);
    int mdb_env_copyfd(MDB_env env, int fd);
    int mdb_env_stat(MDB_env env, MDB_stat stat);

    int mdb_env_sync(MDB_env env, int force);
    int mdb_env_set_flags(MDB_env env, uint flags, int onoff);

    @inject I'unsigned int mdb_env_get_flags_crk(MDB_env *env) {
                unsigned int flags;
                errno = mdb_env_get_flags(env, &flags);
                if (errno) return 0;
                return flags;
            }\n';

    @cname mdb_env_get_flags_crk
    uint mdb_env_get_flags(MDB_env env);

    @inject I'MDB_txn *mdb_txn_begin_crk(MDB_env *env, MDB_txn *parent,
                                        unsigned int flags)
            {
                MDB_txn *txn;
                errno = mdb_txn_begin(env, parent, flags, &txn);

                if (errno) return NULL;
                return txn;
            }\n';

    @cname mdb_txn_begin_crk
    MDB_txn mdb_txn_begin(MDB_env env, MDB_txn parent, uint flags);

    MDB_env mdb_txn_env(MDB_txn txn);
    int mdb_txn_commit(MDB_txn txn);
    void mdb_txn_abort(MDB_txn txn);
    void mdb_txn_reset(MDB_txn txn);
    int mdb_txn_renew(MDB_txn txn);

    @inject I'unsigned int mdb_dbi_open_crk(MDB_txn *txn, const char *name,
                                       unsigned int flags)
            {
                unsigned int dbi;
                errno = mdb_dbi_open(txn, name, flags, &dbi);
                if (errno) return 0;
                return dbi;
            }\n';

    @cname mdb_dbi_open_crk
    uint mdb_dbi_open(MDB_txn txn, byteptr name, uint flags);
    void mdb_dbi_close (MDB_env env, uint dbi);
    int mdb_drop(MDB_txn txn, uint dbi, int del);

    int mdb_get(MDB_txn txn, uint dbi, MDB_val key, MDB_val data);
    int mdb_put(MDB_txn txn, uint dbi, MDB_val key, MDB_val data, uint flags);
    int mdb_del(MDB_txn txn, uint dbi, MDB_val key, MDB_val data);

    @inject I'MDB_cursor *mdb_cursor_open_crk(MDB_txn *txn, unsigned int dbi) {
                MDB_cursor *cursor;
                errno = mdb_cursor_open(txn, dbi, &cursor);
                if (errno) return NULL;
                return cursor;
            }\n';

    @cname mdb_cursor_open_crk
    MDB_cursor mdb_cursor_open(MDB_txn txn, uint dbi);

    void mdb_cursor_close(MDB_cursor cursor);
    int mdb_cursor_renew(MDB_txn txn, MDB_cursor cursor);
    MDB_txn mdb_cursor_txn (MDB_cursor cursor);
    uint mdb_cursor_dbi(MDB_cursor cursor);

    int mdb_cursor_get(MDB_cursor cursor, MDB_val key, MDB_val data, int op);
    int mdb_cursor_put(MDB_cursor cursor, MDB_val key, MDB_val data, uint flags);
    int mdb_cursor_del(MDB_cursor cursor, uint flags);

    @inject I'uint64_t mdb_cursor_count_crk(MDB_cursor *cursor) {
                size_t countp;
                errno = mdb_cursor_count(cursor, &countp);
                if (errno) return 0;
                return countp;
            }\n';

    @cname mdb_cursor_count_crk
    uint64 mdb_cursor_count(MDB_cursor cursor);

    @inject I'int mdb_reader_check_crk(MDB_env *env) {
                int num_cleared;
                errno = mdb_reader_check(env, &num_cleared);
                if (errno) return -1;
                return num_cleared;
            }\n';

    @cname mdb_reader_check_crk
    int mdb_reader_check(MDB_env env);
}
