// Copyright 2013 Conrad Steenberg <conrad.steenberg@gmail.com>
//
//   This Source Code Form is subject to the terms of the Mozilla Public
//   License, v. 2.0. If a copy of the MPL was not distributed with this
//   file, You can obtain one at http://mozilla.org/MPL/2.0/.

import crack.cont.array Array;
import crack.cont.numericarray NumericVector;
import crack.ffmt.netcdf ncFile, ncDim, ncVar; // Higher level interface
import crack.io cout, cerr;
import crack.lang CString;
import crack.runtime exit;
import crack.ext._netcdf
    // Function names
    nc_def_var, nc_put_var_double, nc_put_var_int, nc_get_var_double,
    nc_get_status, nc_inq_ndims, nc_inq_dimids, nc_inq_dimname,
    nc_get_vara_double,  nc_put_vara_int, nc_get_vara_int, nc_strerror,
    nc_get_var_int, nc_put_var, nc_get_var, nc_put_vara_double,
    nc_inq_dimlen, nc_rename_dim, nc_inq_nvars,  nc_inq_varids,
    nc_inq_libvers, nc_create, nc_open, nc_var_par_access, nc_inq_path,
    nc_inq_varid, nc_inq_varname, nc_inq_varndims, nc_inq_vardimid,
    nc_inq_vartype, nc_redef, nc_enddef, nc_sync, nc_abort, nc_close,
    nc_def_dim,

    // Constants
    NC_CHUNKED, NC_CONTIGUOUS, NC_NOCHECKSUM, NC_FLETCHER32, NC_NOSHUFFLE,
    NC_CLASSIC_MODEL, NC_SHARE, NC_MPIIO, NC_MPIPOSIX, NC_PNETCDF,
    NC_COMPOUND, NC_FIRSTUSERTYPEID, NC_FILL, NC_NOFILL, NC_NOWRITE,
    NC_DOUBLE, NC_UBYTE, NC_USHORT, NC_UINT, NC_INT64, NC_UINT64,
    NC_EATTEXISTS, NC_ENOTNC4, NC_ESTRICTNC3, NC_ENOTNC3, NC_ENOPAR,
    NC_EBADCLASS, NC_EMAPTYPE, NC_ELATEFILL, NC_ELATEDEF, NC_EDIMSCALE,
    NC_EBADDIM, NC_EUNLIMPOS, NC_EMAXVARS, NC_ENOTVAR, NC_EGLOBAL,
    NC_EDAPURL, NC_EDAPCONSTRAINT, NC_ETRANSLATION, NC4_FIRST_ERROR,
    NC_EDIMMETA, NC_EATTMETA, NC_EVARMETA, NC_ENOCOMPOUND,
    NC_EEDGE, NC_ESTRIDE, NC_EBADNAME, NC_ERANGE, NC_ENOMEM,
    NC_EHDFERR, NC_ECANTREAD, NC_ECANTWRITE, NC_ECANTCREATE, NC_EFILEMETA,
    NC_EINVAL, NC_EPERM, NC_ENOTINDEFINE, NC_EINDEFINE, NC_EINVALCOORDS,
    NC_EIO, NC_ENODATA, NC_EDAPSVC, NC_EDAS, NC_EDDS, NC_EDATADDS,
    NC_EMAXDIMS, NC_ENAMEINUSE, NC_ENOTATT, NC_EMAXATTS, NC_EBADTYPE,
    NC_ENOGRP, NC_ESTORAGE, NC_EBADCHUNK, NC_ENOTBUILT, NC4_LAST_ERROR,
    NC_ENOTNC, NC_ESTS, NC_EMAXNAME, NC_EUNLIMIT, NC_ENORECVARS, NC_ECHAR,
    NC_EPARINIT, NC_EBADGRPID, NC_EBADTYPID, NC_ETYPDEFINED, NC_EBADFIELD,
    NC_EVARSIZE, NC_EDIMSIZE, NC_ETRUNC, NC_EAXISTYPE, NC_EDAP, NC_ECURL,
    NC_FORMAT_NETCDF4_CLASSIC, NC_SIZEHINT_DEFAULT, NC_UNLIMITED,
    NC_GLOBAL, NC_MAX_DIMS, NC_MAX_ATTRS, NC_MAX_VARS, NC_MAX_NAME,
    NC_LOCK, NC_FORMAT_CLASSIC, NC_FORMAT_64BIT, NC_FORMAT_NETCDF4,
    NC_MAX_VAR_DIMS, NC_ENDIAN_NATIVE, NC_ENDIAN_LITTLE, NC_ENDIAN_BIG,
    NC_NAT, NC_BYTE, NC_CHAR, NC_SHORT, NC_INT, NC_LONG, NC_FLOAT,
    NC_SHUFFLE, NC_NOERR, NC2_ERR, NC_EBADID, NC_ENFILE, NC_EEXIST,
    NC_STRING, NC_MAX_ATOMIC_TYPE, NC_VLEN, NC_OPAQUE, NC_ENUM,
    NC_WRITE, NC_CLOBBER, NC_NOCLOBBER, NC_64BIT_OFFSET, NC_NETCDF4;

// Define some data to save
int sqr(int x) { return x * x; }

x := NumericVector[int].range(10);
y := x.mapped(sqr);



ncid := nc_create("test.nc".buffer, NC_FORMAT_NETCDF4);
ncStatus := nc_get_status();
if (ncStatus != 0) {
    cout `ncid = $ncid, status = $(nc_get_status()), $(CString(nc_strerror(ncStatus), false))\n`;
    cerr `Exiting...\n`;
    exit (1);
}

dims := Array[int]![nc_def_dim(ncid, "len".buffer, x.count())];
xvar := nc_def_var(ncid, "x".buffer, NC_INT, 1, dims.data());
yvar := nc_def_var(ncid, "y".buffer, NC_INT, 1, dims.data());

if (xvar == -1 || yvar == -1) {
    cerr `Could not define X variable: $(String(nc_strerror(ncStatus), false))\n`;
}

nc_enddef(ncid);

nc_put_var_int(ncid, xvar, x.data());
nc_put_var_int(ncid, yvar, y.data());

ncStatus = nc_close(ncid);

if (ncStatus != 0) {
    cerr `Could not close file: $(CString(nc_strerror(ncStatus), false))\n`;
    exit(2);
}

// Now read back the data

ncid = nc_open("test.nc".buffer, NC_NOWRITE);
numVars := nc_inq_nvars(ncid);
if (numVars != 2) {
    cerr `Found $numVars variables in file instead of 2\n`;
    exit(3);
}
xvar = nc_inq_varid(ncid, "x".buffer);
yvar = nc_inq_varid(ncid, "y".buffer);

xtest := NumericVector[int].empty(10);
ytest := NumericVector[int].empty(10);

if (nc_get_var_int(ncid, xvar, xtest.data()) != 0 ||
    nc_get_var_int(ncid, yvar, ytest.data()) != 0
    ) {
    cerr ` Failed to read x or y arrays from file\n`;
    exit(4);
}

if (xtest != x || ytest != y) {
    cerr `File data does not match:\n`;
    cerr `x: $x vs $xtest\n`;
    cerr `y: $x vs $ytest\n`;
    exit(5);
}

ncStatus = nc_close(ncid);
if (ncStatus != 0)
    cerr `Could not close file: $(CString(nc_strerror(ncStatus), false))\n`;

// Test higher level wrapper
F := ncFile.openReadOnly("test.nc");
F.close();

file = ncFile.create("test.nc", NC_FORMAT_NETCDF4);
l := file.newDim("len", x.count());
xnc := file.newVar("x", NC_INT, Array[ncDim]![l]);
ync := file.newVar("y", NC_INT, Array[ncDim]![l]);
file.endDef();
xnc.putVar(x);
ync.putVar(y);
file.sync();

ncStatus = file.close();
if (ncStatus != 0)
    cout `ok\n`;
else
    cerr `Could not close file: $(CString(nc_strerror(ncStatus), false))\n`;
