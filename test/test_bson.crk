// Copyright 2013 Conrad Steenberg <conrad.steenberg@gmail.com>
//
//   This Source Code Form is subject to the terms of the Mozilla Public
//   License, v. 2.0. If a copy of the MPL was not distributed with this
//   file, You can obtain one at http://mozilla.org/MPL/2.0/.


import crack.lang Buffer,CString;
import crack.cont.array Array;
import crack.io cout, FStr;

import crack.ext._mongo
                        // Types
                        bson, bson_cursor,

                        // Function names
                        bson_new, bson_new_from_data, bson_finish, bson_reset,
                        bson_free, bson_size, bson_data, bson_append_string,
                        bson_append_double, bson_append_boolean,
                        bson_append_null, bson_append_int32,
                        bson_append_int64, bson_cursor_new,
                        bson_cursor_get_string, bson_cursor_free,
                        bson_cursor_next, bson_cursor_key,
                        bson_cursor_get_double, bson_cursor_get_boolean,
                        bson_cursor_get_int32, bson_cursor_get_int64;

import crack.db.mongo BSON;

// Basic test of bson functions, compared to values generated by equivalent C
b := bson_new();
greeting := "greeting";
hello := "hello";
bson_append_string(b, greeting.buffer, hello.buffer, -1);
bson_append_double(b, "float".buffer, 3.1541);
bson_append_boolean(b, "bool".buffer, true);
bson_append_null(b, "null".buffer);

bson_append_int32(b,"int32".buffer, 65535);
bson_append_int64(b,"int64".buffer, 7979879889);
bson_finish(b);

data := Array[byte](array[byte](bson_data(b)), bson_size(b), bson_size(b), false);
result := Array[byte]![79, 0, 0, 0, 2, 103, 114, 101, 101, 116, 105, 110, 103,
                       0, 6, 0, 0, 0, 104, 101, 108, 108, 111, 0, 1, 102, 108,
                       111, 97, 116, 0, 65, 130, 226, 199, 152, 59, 9, 64, 8, 98,
                       111, 111, 108, 0, 1, 10, 110, 117, 108, 108, 0, 16, 105,
                       110, 116, 51, 50, 0, 255, 255, 0, 0, 18, 105, 110, 116,
                       54, 52, 0, 209, 77, 163, 219, 1, 0, 0, 0, 0
                      ];

// Traverse the bson object using a cursor
c := bson_cursor_new(b);
bson_cursor_next(c);
resultHello := CString(bson_cursor_get_string(c), false);
resultGreeting := CString(bson_cursor_key(c), false);
bson_cursor_next(c);
resultFloat := bson_cursor_get_double(c);
bson_cursor_next(c);
resultBool := bson_cursor_get_boolean(c);
bson_cursor_next(c);
bson_cursor_next(c);
resultInt32 := bson_cursor_get_int32(c);
bson_cursor_next(c);
resultInt64 := bson_cursor_get_int64(c);
bson_cursor_free(c);

// Higher level wrapper should yield the same results
B := BSON();

B.appendString("greeting", "hello");
B.appendFloat64("float", 3.1541);
B.appendBool("bool", true);
B.appendNull("null");
B.appendInt32("int32", 65535);
B.appendInt64("int64", 7979879889);
B.finish();

DataBuffer := B.data();
Data := Array[byte](array[byte](DataBuffer.buffer), DataBuffer.size, DataBuffer.size, false);

C := B.cursor();

C.next();
resultHello = C.getString();
resultGreeting = C.key();
C.next();
resultFloat = C.getFloat64();
C.next();
resultBool = C.getBool();
C.next();
C.next();
resultInt32 = C.getInt32();
C.next();
resultInt64 = C.getInt64();
JSONresult := FStr() `$B`;
JSONexpected := '{greeting: "hello", float: 3.154100, bool: true, null: null, int32: 65535, int64: 7979879889}';

if (data == result && Data == result && JSONresult == JSONexpected)
    cout.write("ok\n");

bson_free(b);

