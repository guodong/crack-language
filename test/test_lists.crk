// A few tests for lists and linked list appending and popping from the head
// and tail
// Copyright 2012 Conrad Steenberg <conrad.steenberg@gmail.com>
//
//   This Source Code Form is subject to the terms of the Mozilla Public
//   License, v. 2.0. If a copy of the MPL was not distributed with this
//   file, You can obtain one at http://mozilla.org/MPL/2.0/.
//
// 6/1/2012

import crack.io cout, FStr;

import crack.cont.list DList, List;
import crack.cont.hashmap OrderedHashMap; // Also uses a list
List[int] nums = {};
DList[int] dnums = {};
OrderedHashMap[int, int] map = {};

//------------------------------------------------------------------------------
// List
nums.append(1);
nums.append(2);
if (nums.count() != 2) cout `List append failed: $nums\n`;

if (nums.popHead() != 1) cout `List.popHead failed\n`;

if (nums.popHead() != 2) cout `List.popHead failed\n`;
if (nums.count()) cout `List popHead failed: $nums\n`;

nums.append(1);
nums.append(2);
if (nums.count() != 2) cout `List append failed: $nums\n`;

if (nums.popHead() != 1) cout `List.popHead failed\n`;

if (nums.popHead() != 2) cout `List.popHead failed\n`;
if (nums.count()) cout `List popHead failed: $nums\n`;

nums.clear();
if (nums.count() != 0) cout `List.clear failed\n`;
if (FStr() `$nums` != '[]') cout `List.clear failed formatting\n`;
nums.append(1);
if (FStr() `$nums` != '[1]')
    cout `List.clear -> append failed formatting\n`;
nums.clear();

//------------------------------------------------------------------------------
nums.append(1);
nums.append(2);
if (nums.count() != 2) cout `List append failed: $nums\n`;


if (nums.pop() != 2) cout `List.pop failed\n`;

if (nums.pop() != 1) cout `List.pop failed\n`;
if (nums.count()) cout `List popTail failed: $nums\n`;

nums.append(1);
nums.append(2);
if (nums.count() != 2) cout `List append failed: $nums\n`;


if (nums.pop() != 2) cout `List.pop failed\n`;

if (nums.pop() != 1) cout `List.pop failed\n`;
if (nums.count()) cout `List popTail failed: $nums, $(nums.count())\n`;

//------------------------------------------------------------------------------
// DList

dnums.append(1);
dnums.append(2);
if (dnums.count() != 2) cout `DList append failed: $dnums\n`;

if (dnums.popHead() != 1) cout `DList.popHead failed\n`;

if (dnums.popHead() != 2) cout `DList.popHead failed\n`;
if (dnums.count()) cout `DList popHead failed: $dnums\n`;

dnums.append(1);
dnums.append(2);
if (dnums.count() != 2) cout `DList append failed: $dnums\n`;


if (dnums.popHead() != 1) cout `DList.popHead failed\n`;

if (dnums.popHead() != 2) cout `DList.popHead failed\n`;
if (dnums.count()) cout `DList popHead failed: $dnums\n`;

dnums.clear();
if (dnums.count() != 0) cout `DList.clear failed\n`;
if (FStr() `$dnums` != '[]') cout `DList.clear failed formatting\n`;
dnums.append(1);
if (FStr() `$dnums` != '[1]')
    cout `List.clear -> append failed formatting\n`;
dnums.clear();


//------------------------------------------------------------------------------

dnums.append(1);
dnums.append(2);
if (dnums.count() != 2) cout `DList append failed: $dnums\n`;


if (dnums.pop() != 2) cout `DList.pop failed\n`;

if (dnums.pop() != 1) cout `DList.pop failed\n`;
if (dnums.count()) cout `DList pop failed: $dnums\n`;

dnums.append(1);
dnums.append(2);
if (dnums.count() != 2) cout `DList append failed: $dnums\n`;


if (dnums.pop() != 2) cout `DList.pop failed\n`;

if (dnums.pop() != 1) cout `DList.pop failed\n`;
if (dnums.count()) cout `DList popHead failed: $dnums\n`;

//------------------------------------------------------------------------------
// OrderedHashMap

map.append(1, 1);
map.append(2, 2);
if (map.count()!=2) cout `OrderedHashMap append failed: $map\n`;

if (map.popHead().val != 1) cout `OrderedHashMap.popHead failed\n`;

if (map.popHead().val != 2) cout `OrderedHashMap.popHead failed\n`;
if (map.count()) cout `OrderedHashMap popHead failed: $map\n`;

map.append(1, 1);
map.append(2, 2);
if (map.count() != 2) cout `OrderedHashMap append failed: $map\n`;


if (map.popHead().val != 1) cout `OrderedHashMap.popHead failed\n`;


if (map.popHead().val != 2) cout `OrderedHashMap.popHead failed: $map\n`;
if (map.count()) cout `OrderedHashMap popHead failed: $map\n`;

//------------------------------------------------------------------------------

map.append(1, 1);
map.append(2, 2);
if (map.count() != 2) cout `OrderedHashMap append failed: $map\n`;


if (map.pop().val != 2) cout `OrderedHashMap.pop failed\n`;

if (map.pop().val != 1) cout `OrderedHashMap.pop failed\n`;
if (map.count()) cout `OrderedHashMap pop failed: $map\n`;

map.append(1, 1);
map.append(2, 2);
if (map.count() != 2) cout `OrderedHashMap append failed: $map\n`;


if (map.pop().val != 2) cout `OrderedHashMap.pop failed\n`;

if (map.pop().val != 1) cout `OrderedHashMap.pop failed\n`;
if (map.count()) cout `OrderedHashMap popHead failed: $map\n`;


cout `ok\n`;
