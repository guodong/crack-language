%%TEST%%
ascii module
%%ARGS%%
%%FILE%%
import crack.io cout;
import crack.ascii radix, strip, parseInt, toUpper, toLower, isSpace, isDigit,
    fract10;

if (radix(0, 10) != '0')
    cout `FAILED radix(0)\n`;

if (radix(12345, 10) != '12345')
    cout `FAILED radix(12345, 10)\n`;

if (radix(0xabc123, 16) != 'abc123')
    cout `FAILED radix(0xabc123)\n`;

if (strip('  this is a test  \r\n') != 'this is a test')
    cout `FAILED simple strip()\n`;

if (strip('  \t\n  \r') != '')
    cout `FAILED all whitespace strip()\n`;

if (strip('') != '')
    cout `FAILED empty strip\n`;

if (strip('   leading') != 'leading')
    cout `FAILED strip() with only leading whitespace\n`;

if (strip('trailing   ') != 'trailing')
    cout `FAILED strip() with only trailing whitespace\n`;

if (toUpper('This Is a Test') != 'THIS IS A TEST')
    cout `FAILED toUpper()\n`;

if (toUpper('') != '')
    cout `FAILED toUpper('')\n`;

if (toLower('tHIS iS A tEST') != 'this is a test')
    cout `FAILED toLower()\n`;

if (!isSpace(' \n\t\r'))
    cout `FAILED isSpace check on string of spaces\n`;

if (isSpace('  x   '))
    cout `FAILED isSpace check on string with non-spaces\n`;

if (!isDigit(b'0') || !isDigit(b'9') || !isDigit(b'5'))
    cout `FAILED isDigit check on digits\n`;

# check one outside the range
if (isDigit(b'/') || isDigit(b':'))
    cout `FAILED isDigit check on non-digit.\n`;

if (parseInt('100') != 100)
    cout `FAILED parseInt(100)\n`;

if (parseInt('0') != 0)
    cout `FAILED parseInt(0)\n`;

if (parseInt('-23') != -23)
    cout `FAILED parseInt(-23)\n`;

if (fract10(0, 10) != '0')
    cout `FAILED fract10(0)\n`;

if (fract10(12, 3) != '012')
    cout `FAILED value with leading zeroes\n`;

if (fract10(90, 2) != '9')
    cout `FAILED value with hidden trailing zeroes\n`;

if (fract10(123, 3) != '123')
    cout `FAILED value with no leading or trailing zeroes\n`;


cout `ok\n`;
%%EXPECT%%
ok
%%STDIN%%
