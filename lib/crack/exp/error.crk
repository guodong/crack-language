# Copyright 2010-2011 Google Inc.
# Copyright 2012 Conrad Steenberg <conrad.steenberg@gmail.com>
# 
#   This Source Code Form is subject to the terms of the Mozilla Public
#   License, v. 2.0. If a copy of the MPL was not distributed with this
#   file, You can obtain one at http://mozilla.org/MPL/2.0/.
# 
# Simple error handling module to tide us over until we get exceptions.
# Examples:
#   # write an error and terminate
#   err.do() `Something bad happened!`;
#
#   # capture errors (you will continue catching errors until the catcher is 
#   # destroyed)
#   catcher := ErrorCatcher();
#   someFuncThatCanError();
#   if (catcher.gotError()) {
#       cerr `there was an error: $(catcher.getText())\n`;
#       catcher.reset();  # reset the catcher if you want to reuse it.
#   }

import crack.runtime abort;
import crack.io cerr, StandardFormatter, StringWriter, Writer;

class ErrorHandler {
    
    ## Set this to true if you want errors to be fatal, false if you want to 
    ## handle them from the caller.
    bool fatal = true;

    ## The output writer that we'll format errors to.
    Writer writer;
    
    ## if fatal is false, this flag will be set when there was an error.
    bool gotError = false;
    
    oper init(Writer writer) : writer = writer {}
    
    void finish() {
        if (fatal) {
            writer.write('\n');
            abort();
        } else {
            gotError = true;
        }
    }
    
    class ErrorFormatter : StandardFormatter {
        ErrorHandler __handler;

        oper init(ErrorHandler handler) :
            StandardFormatter(handler.writer),
            __handler = handler {
        }
        
        oper del() {
            __handler.finish();
        }
    }
    
    ErrorFormatter do() {
        return ErrorFormatter(this);
    }    
}

err := ErrorHandler(cerr);

## ErrorCatcher is used when a caller doesn't want errors in the called 
## function to cause an abort, but would prefer to handle them itself.
## This registers itself with the error handler when it is created and resets 
## the error handler to its original state when it is destroyed.
class ErrorCatcher {
    StringWriter __writer = {};
    Writer __lastWriter;

    oper init() : __lastWriter = err.writer {
        err.fatal = false;
        err.writer = __writer;
    }
    
    oper del() {
        err.writer = __lastWriter;
        err.fatal = true;
        err.gotError = false;
    }
    
    ## Returns true if there was an error.
    bool gotError() { return err.gotError; }
    
    ## Returns the error text written to err.writer.
    String getText() { return __writer.string(); }
    
    ## Reset the catcher: clears the error from the error handler and the 
    ## error string.
    void reset() {
        err.writer = __writer = StringWriter();
        err.gotError = false;
    }
}
