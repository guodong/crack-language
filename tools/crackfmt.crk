# Script to reformat crack code to the standard style.
#
# Copyright 2013 Google Inc.
#
#   This Source Code Form is subject to the terms of the Mozilla Public
#   License, v. 2.0. If a copy of the MPL was not distributed with this
#   file, You can obtain one at http://mozilla.org/MPL/2.0/.
#

import crack.ascii strip, wsplit;
import crack.cont.treemap TreeMap;
import crack.io cin, cout, Formatter, FStr;
import crack.io.readers LineReader;
import crack.regex Regex;
import crack.strutil StringArray;

# This is currently just a hack.  It recognizes import statements, reorders
# and reformats them.

importRx := Regex(r'\s*import\s+(\S+)\s+(.*)');
varRx := Regex(r'[a-z].*');
constRx := Regex(r'[A-Z_]+[,;]?$');

int cmpi(String a, String b) {
    int i;
    for (i = 0; i < a.size; ++i) {
        if (i >= b.size)
            return a.buffer[i];

        # case insensitize the current characters.
        int ac = a.buffer[i];
        ac = (ac >= b'a' && ac < b'z') ? ac - 32 : ac;
        int bc = b.buffer[i];
        bc = (bc >= b'a' && ac < b'z') ? bc - 32 : bc;

        diff := ac - bc;
        if (diff)
            return diff;
    }

    return (i < b.size) ? -int(b[i]) : 0;
}

class Import {
    String moduleName;
    StringArray imports = {};

    oper init(String moduleName) : moduleName = moduleName {}

    ## Sorts the names that are imported.
    void sortNames() {
        StringArray vars = {}, classes = {}, constants = {};
        for (name :in imports) {
            if (varRx.match(name))
                vars.append(name);
            else if (constRx.match(name))
                constants.append(name);
            else
                classes.append(name);
        }
        vars.sort(cmpi);
        classes.sort(cmpi);
        constants.sort(cmpi);
        imports = vars;
        imports.extend(classes);
        imports.extend(constants);
    }

    void format(Formatter out) {
        beginning := FStr() `import $(moduleName)`;
        out.write(beginning);
        count := beginning.size;
        bool first = true;
        for (imp :in imports) {
            if (!first)
                out `,`;
            else
                first = false;
            if (count + imp.size + 2 >= 80) {
                out `\n    $imp`;
                count = 4 + imp.size;
            } else {
                out ` $imp`;
                count += imp.size + 2;
            }
        }
        out `;\n`;
    }

    ## Returns true if we got a trailing semicolon.
    bool addImports(StringArray words) {
        bool gotSemi;
        for (word :in words) {
            if (word[-1] == b',') {
                word = word.slice(0, -1);
                if (!word)
                    continue;
            } else if (word[-1] == b';') {
                word = word.slice(0, -1);
                if (!word)
                    return true;
                gotSemi = true;
            }

            imports.append(word);
        }

        return gotSemi;
    }
}

Import lastImport;
importStatements := TreeMap[String, Import]();

for (line :in LineReader(cin)) {
    if (lastImport) {
        if (lastImport.addImports(wsplit(strip(line))))
            lastImport = null;
    } else if (m := importRx.match(line)) {
        moduleName := m.group(1);
        imports := m.group(2);
        if (im := importStatements.get(moduleName))
            lastImport = im;
        else
            importStatements[moduleName] = lastImport = Import(moduleName);
        if (lastImport.addImports(wsplit(strip(imports))))
            lastImport = null;
    } else if (strip(line) && importStatements) {
        # we got a non-import line, emit the imports.
        for (item :in importStatements) {
            item.val.sortNames();
            item.val.format(cout);
        }
        importStatements.clear();
        cout.write(line);
    } else {
        cout.write(line);
    }
}

if (importStatements) {
    for (item :in importStatements) {
        item.val.sortNames();
        item.val.format(cout);
    }
}
